#include "Memory.hpp"

//////////////////////////////////////////////////////////////////////////////
// Memory::Memory( unsigned long MemSize )
// Memory object constructor
//////////////////////////////////////////////////////////////////////////////
Memory::Memory( unsigned long MemSize )
{
  memsize = MemSize;
  memarray = new unsigned char[memsize];
}

//////////////////////////////////////////////////////////////////////////////
// Memory::~Memory( )
// Memory object destructor
//////////////////////////////////////////////////////////////////////////////
Memory::~Memory( )
{
  delete[] memarray;
  memarray = 0;
  memsize = 0;
}

//////////////////////////////////////////////////////////////////////////////
// unsigned long Memory::GetSize( )
// Get Memory size
//////////////////////////////////////////////////////////////////////////////
unsigned long Memory::GetSize( )
{
  return memsize;
}

//////////////////////////////////////////////////////////////////////////////
// void Memory::Write8( unsigned long Address, unsigned char Value )
// Write 8-bit Value at Address into Memory
//////////////////////////////////////////////////////////////////////////////
void Memory::Write8( unsigned long Address, unsigned char Value )
{
  if (Address >= memsize) return;
  memarray[Address] = Value;
}

//////////////////////////////////////////////////////////////////////////////
// unsigned char Memory::Read8( unsigned long Address )
// Read 8-bit value at Address in Memory
//////////////////////////////////////////////////////////////////////////////
unsigned char Memory::Read8( unsigned long Address )
{
  if (Address < memsize) { return memarray[Address]; }
  return 0;
}
